version: '3'
services:
  #  config-server:
  #    image: messikhaymen/config-server:latest
  #    container_name: config-server
  #    networks:
  #      - nfr-network
  #    ports:
  #      - "8888:8888"
  #
  #  discovery-service:
  #    image: messikhaymen/discovery-service:latest
  #    container_name: discovery-service
  #    networks:
  #      - nfr-network
  #    ports:
  #      - "8761:8761"
  #
  #  gateway-service:
  #    image: messikhaymen/gateway-service:latest
  #    container_name: gateway-service
  #    networks:
  #      - nfr-network
  #    ports:
  #      - "8081:8081"
  #
  #  notification-service:
  #    image: messikhaymen/notification-service:latest
  #    container_name: notification-service
  #    networks:
  #      - nfr-network
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=docker
  #    ports:
  #      - "8091:8091"
  #
  #  admin-service:
  #    image: messikhaymen/admin-service:latest
  #    container_name: admin-service
  #    networks:
  #      - nfr-network
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=docker
  #    ports:
  #      - "8090:8090"

  postgres-admin:
    image: postgres:latest
    container_name: admin-db
    ports:
      - "5430:5432"
    networks:
      - nfr-network
    environment:
      POSTGRES_DB: admin-db #change name of db and userName and password
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres-admin-data:/var/lib/postgresql/data

  postgres-notification:
    image: postgres:latest
    container_name: notification-db
    ports:
      - "5431:5432"
    networks:
      - nfr-network
    environment:
      POSTGRES_DB: notification-db
      POSTGRES_USER: notification
      POSTGRES_PASSWORD: notification
    volumes:
      - postgres-notification-data:/var/lib/postgresql/data

  #  keycloak:
  #    image: quay.io/keycloak/keycloak:25.0.1
  #    container_name: keycloak
  #    networks:
  #      - nfr-network
  #    environment:
  #      DB_VENDOR: POSTGRES
  #      KEYCLOAK_USER: admin
  #      KEYCLOAK_PASSWORD: admin
  #    ports:
  #      - "8080:8080"
  #    volumes:
  #      - keycloak-data:/opt/jboss/keycloak/standalone/data
  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres:latest
    restart: always
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    networks:
      - nfr-network

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.1
    command: [ "start-dev", "--import-realm" ]
    restart: always
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./Observability/keycloak/realms/:/opt/keycloak/data/import/
      - ./my-custom-theme:/opt/keycloak/themes/my-custom-theme
    depends_on:
      - postgres-keycloak
    networks:
      - nfr-network



  #  kafka:
  #    image: confluentinc/cp-kafka:7.0.1
  #    container_name: kafka
  #    networks:
  #      - nfr-network
  #    ports:
  #      - "9092:9092"
  #    environment:
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #
  #  zookeeper:
  #    image: confluentinc/cp-zookeeper:7.0.1
  #    container_name: zookeeper
  #    networks:
  #      - nfr-network
  #    ports:
  #      - "2181:2181"
  #    environment:
  #      ZOOKEEPER_CLIENT_PORT: 2181
  #      ZOOKEEPER_TICK_TIME: 2000
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka:29092
      #      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./Services/config-server\src\main\resources\configurations\prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./Services/config-server\src\main\resources\configurations/tempo.yml:/etc/tempo.yaml:ro
      - ./Observability/data/tempo:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    volumes:
      - ./Services/config-server\src\main\resources\configurations:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"

networks:
  nfr-network:

volumes:
  postgres-admin-data:
  postgres-notification-data:
  keycloak-data:
  keycloak-postgres-data: